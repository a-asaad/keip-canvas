{
  "integration": [
    {
      "name": "inbound-channel-adapter",
      "description": "Defines a Polling Channel Adapter",
      "role": "endpoint",
      "flowType": "source",
      "attributes": [
        {
          "name": "ref",
          "type": "string",
          "description": "A reference to a bean defined in the application context."
        },
        {
          "name": "method",
          "type": "string",
          "description": "A method defined on the bean referenced by 'ref' attribute"
        },
        {
          "name": "expression",
          "type": "string",
          "description": "SpEL expression to be evaluated for each triggered execution. The result of the evaluation will be passed as the payload of the Message that is sent to the MessageChannel."
        },
        {
          "name": "id",
          "type": "string"
        },
        {
          "name": "channel",
          "type": "string",
          "description": "Identifies channel attached to this adapter. Depending on the type of the adapter this channel could be the receiving channel (e.g., outbound-channel-adapter) or channel where messages will be sent to by this adapter (e.g., inbound-channel-adapter)."
        },
        {
          "name": "auto-startup",
          "type": "boolean",
          "description": "Boolean value indicating whether this endpoint should start automatically.",
          "default": true
        },
        {
          "name": "phase",
          "type": "string",
          "description": "The lifecycle phase within which this endpoint should start and stop. The lower the value the earlier this endpoint will start and the later it will stop. The default is 0. Values can be negative. See SmartLifeCycle."
        },
        {
          "name": "role",
          "type": "string",
          "description": "Assigns this endpoint to a role. Endpoints in a role can be started/stopped as a group. See 'SmartLifecycleRoleController'."
        },
        {
          "name": "send-timeout",
          "type": "string",
          "description": "Maximum amount of time in milliseconds to wait when sending a message to the channel if such channel may block. For example, a Queue Channel can block until space is available if its maximum capacity has been reached. Defaults to '-1' - blocking indefinitely."
        }
      ],
      "childGroup": {
        "indicator": "sequence",
        "elements": [
          {
            "name": "poller",
            "description": "Defines the configuration metadata for a poller.",
            "occurrence": { "min": 0 },
            "attributes": [
              {
                "name": "fixed-delay",
                "type": "string",
                "description": "Fixed delay trigger (in milliseconds)."
              },
              {
                "name": "ref",
                "type": "string",
                "description": "Allows this poller to reference another instance of a top-level poller.Defining this attribute on a top-level poller definition will result in a configuration exception."
              },
              {
                "name": "fixed-rate",
                "type": "string",
                "description": "Fixed rate trigger (in milliseconds)."
              },
              {
                "name": "time-unit",
                "type": "string",
                "description": "The java.util.concurrent.TimeUnit enum value. This can ONLY be used in combinationwith the 'fixed-delay' or 'fixed-rate' attributes. If combined with either 'cron'or a 'trigger' reference attribute, it will cause a failure. The minimal supportedgranularity for a PeriodicTrigger is MILLISECONDS. Therefore, the only available optionsare MILLISECONDS and SECONDS. If this value is not provided, then any 'fixed-delay' or'fixed-rate' value will be interpreted as MILLISECONDS by default. Basically this enumprovides a convenience for SECONDS-based interval trigger values. For hourly, daily,and monthly settings, consider using a 'cron' trigger instead.",
                "restriction": {
                  "enum": ["MILLISECONDS", "SECONDS"]
                }
              },
              {
                "name": "cron",
                "type": "string",
                "description": "Cron trigger."
              },
              {
                "name": "trigger",
                "type": "string",
                "description": "Expected Type: org.springframework.scheduling.Trigger"
              },
              {
                "name": "receive-timeout",
                "type": "string",
                "description": "Only applies to polling consumers - the time the poll thread will wait after the trigger for a new message to arrive. Defaults to 1000 (1 second). For polled inbound channel adapters, whether or not the polling thread blocks is dependent on the message source implementation."
              },
              {
                "name": "max-messages-per-poll",
                "type": "string",
                "description": "The maximum number of messages that will be produced for each poll. Defaults to infinity (indicated by -1) for polling consumers, and 1 for polled inbound channel adapters."
              },
              {
                "name": "task-executor",
                "type": "string",
                "description": "Expected Type: org.springframework.core.task.TaskExecutor"
              },
              {
                "name": "error-channel",
                "type": "string",
                "description": "Identifies channel that error messages will be sent to if a failure occurs in this poller's invocation. To completely suppress Exceptions, provide a reference to the 'nullChannel' here."
              }
            ],
            "childGroup": {
              "indicator": "choice",
              "elements": [
                {
                  "name": "transactional",
                  "occurrence": { "min": 0 },
                  "attributes": [
                    {
                      "name": "transaction-manager",
                      "type": "string",
                      "default": "transactionManager",
                      "description": "The bean name of the PlatformTransactionManager to use."
                    },
                    {
                      "name": "propagation",
                      "type": "string",
                      "default": "REQUIRED",
                      "description": "The transaction propagation behavior.",
                      "restriction": {
                        "enum": [
                          "REQUIRED",
                          "SUPPORTS",
                          "MANDATORY",
                          "REQUIRES_NEW",
                          "NOT_SUPPORTED",
                          "NEVER",
                          "NESTED"
                        ]
                      }
                    },
                    {
                      "name": "isolation",
                      "type": "string",
                      "default": "DEFAULT",
                      "description": "The transaction isolation level.",
                      "restriction": {
                        "enum": [
                          "DEFAULT",
                          "READ_UNCOMMITTED",
                          "READ_COMMITTED",
                          "REPEATABLE_READ",
                          "SERIALIZABLE"
                        ]
                      }
                    },
                    {
                      "name": "timeout",
                      "type": "string",
                      "default": "-1",
                      "description": "The transaction timeout value (in seconds)."
                    },
                    {
                      "name": "read-only",
                      "type": "boolean",
                      "default": "false",
                      "description": "Is this transaction read-only?"
                    },
                    {
                      "name": "synchronization-factory",
                      "type": "string",
                      "description": "Reference to an instance of org.springframework.integration.transaction.TransactionSynchronizationFactory which will return an instance of org.springframework.transaction.support.TransactionSynchronization via its create(..) method."
                    }
                  ]
                },
                {
                  "name": "advice-chain",
                  "description": "A chain of nested AOP 'Advice' objects applied to the poller task. Mutually exclusive with 'transactional'.",
                  "occurrence": { "min": 0 },
                  "attributes": [
                    {
                      "name": "synchronization-factory",
                      "type": "string",
                      "description": "Reference to an instance of org.springframework.integration.transaction.TransactionSynchronizationFactory which will return an instance of org.springframework.transaction.support.TransactionSynchronization via its create(..) method."
                    }
                  ],
                  "childGroup": {
                    "indicator": "sequence",
                    "elements": [
                      {
                        "name": "ref",
                        "occurrence": { "min": 0, "max": "unbounded" },
                        "attributes": [
                          { "name": "bean", "type": "string", "required": true }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "name": "expression",
            "occurrence": { "min": 0 },
            "attributes": [
              {
                "name": "key",
                "type": "string",
                "description": "The key for retrieving the expression from an ExpressionSource.",
                "required": true
              },
              {
                "name": "source",
                "type": "string",
                "default": "expressionSource",
                "description": "The reference to an ExpressionSource."
              }
            ]
          },
          {
            "name": "header",
            "description": "Provides mechanism to enrich content of the message with custom message headers. When this method is going to be invoked the generated message will be enriched with these headers.",
            "occurrence": { "min": 0, "max": "unbounded" },
            "attributes": [
              {
                "name": "name",
                "type": "string",
                "description": "The name of the header",
                "required": true
              },
              {
                "name": "value",
                "type": "string",
                "description": "The value of the header. Either this or 'expression' must be provided."
              },
              {
                "name": "expression",
                "type": "string",
                "description": "Expression to be evaluated to produce a value for the header. Either this or 'value' must be provided."
              }
            ]
          }
        ]
      }
    },
    {
      "name": "logging-channel-adapter",
      "description": "Defines a Message Producing Endpoint for the 'org.springframework.integration.handler.LoggingHandler'.",
      "role": "endpoint",
      "flowType": "sink",
      "attributes": [
        {
          "name": "id",
          "type": "string"
        },
        {
          "name": "channel",
          "type": "string",
          "description": "Identifies channel attached to this adapter. Depending on the type of the adapter this channel could be the receiving channel (e.g., outbound-channel-adapter) or channel where messages will be sent to by this adapter (e.g., inbound-channel-adapter)."
        },
        {
          "name": "auto-startup",
          "type": "boolean",
          "description": "Boolean value indicating whether this endpoint should start automatically.",
          "default": true
        },
        {
          "name": "phase",
          "type": "string",
          "description": "The lifecycle phase within which this endpoint should start and stop. The lower the value the earlier this endpoint will start and the later it will stop. The default is 0. Values can be negative. See SmartLifeCycle."
        },
        {
          "name": "role",
          "type": "string",
          "description": "Assigns this endpoint to a role. Endpoints in a role can be started/stopped as a group. See 'SmartLifecycleRoleController'."
        },
        {
          "name": "order",
          "type": "string",
          "description": "Specifies the order for invocation when this endpoint is connected as a subscriber to a channel. This is particularly relevant when that channel is using a 'failover' dispatching strategy. It has no effect when this endpoint itself is a Polling Consumer for a channel with a queue."
        },
        {
          "name": "level",
          "type": "string",
          "description": "Specify the log level.",
          "default": "INFO",
          "restriction": {
            "enum": ["TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL"]
          }
        },
        {
          "name": "logger-name",
          "type": "string",
          "description": "Provide a name for the logger. This is useful when there are multiple logging Channel Adapters configured, and you would like to differentiate them within the actual log. By default the logger name will be the fully qualified class name of the LoggingHandler implementation."
        },
        {
          "name": "expression",
          "type": "string",
          "description": "Provide a SpEL expression to be evaluated against the Message as the root object. For example, the default behavior is equivalent to an expression of 'payload', or an expression may evaluate against the payload itself (\"payload.address.city\") or headers (\"headers.foo\"). This attribute and the 'log-full-message' attribute are mutually exclusive. See the documentation on the 'log-full-message' attribute for more information."
        },
        {
          "name": "log-full-message",
          "type": "boolean",
          "description": "Specify whether to log the full message. This attribute and the 'expression' attribute are mutually exclusive. Setting this to true is equivalent to setting an expression value of '#root' since the Message is the root object against which the expression will be evaluated. If no 'expression' is provided, and this value is false (the default), only the payload will be logged.",
          "default": false
        }
      ]
    },
    {
      "name": "channel",
      "description": "Defines a Point-to-Point MessageChannel. See 'PointToPointChannelParser' source code for 'MessageChannel' implementations.",
      "role": "channel",
      "flowType": "passthru",
      "attributes": [
        {
          "name": "id",
          "type": "string",
          "required": true
        },
        {
          "name": "scope",
          "type": "string"
        },
        {
          "name": "datatype",
          "type": "string",
          "description": "Allows you to identify this channel as a Datatype channel and specify the type of the Message payload this channel accepts (e.g., datatype=\"java.lang.String\"). A Datatype channel is a channel that accepts messages containing payloads of a certain type."
        },
        {
          "name": "message-converter",
          "type": "string",
          "description": "Used with 'datatype' to convert the message payload, if necessary, to one of the datatypes (in order). Note: only the MessageConverter.fromMessage(Message, Class) method is used. If the returned object is not a Message, the inbound headers will be copied; if the returned object is a Message, it is expected that the converter wil have fully populated the headers; no further action is performed by the channel. If null is returned, conversion to the next datatype (if any) will be attempted. Default is a 'DefaultDatatypeChannelMessageConverter' which, in turn, delegates to the 'integrationConversionService' (if present)."
        },
        {
          "name": "fixed-subscriber",
          "type": "boolean",
          "description": "When true, only one subscriber is allowed; the subscriber must be available at context initialization time, and will be subscribed during bean initialization rather than when being started; 'auto-startup=\"false\"' will take no effect on a subscriber to this channel, the subscriber will always be \"started\". The subscriber cannot be stopped. When true, no sub elements are allowed; 'datatype' is not allowed; 'message-converter' is not allowed. Default: false.",
          "default": false
        }
      ]
    },
    {
      "name": "publish-subscribe-channel",
      "description": "Defines a 'org.springframework.integration.channel.PublishSubscribeChannel' that broadcasts messages to its subscribers.",
      "role": "channel",
      "flowType": "passthru",
      "attributes": [
        {
          "name": "id",
          "type": "string",
          "required": true
        },
        {
          "name": "scope",
          "type": "string"
        },
        {
          "name": "datatype",
          "type": "string",
          "description": "Allows you to identify this channel as a Datatype channel and specify the type of the Message payload this channel accepts (e.g., datatype=\"java.lang.String\"). A Datatype channel is a channel that accepts messages containing payloads of a certain type."
        },
        {
          "name": "message-converter",
          "type": "string",
          "description": "Used with 'datatype' to convert the message payload, if necessary, to one of the datatypes (in order). Note: only the MessageConverter.fromMessage(Message, Class) method is used. If the returned object is not a Message, the inbound headers will be copied; if the returned object is a Message, it is expected that the converter wil have fully populated the headers; no further action is performed by the channel. If null is returned, conversion to the next datatype (if any) will be attempted. Default is a 'DefaultDatatypeChannelMessageConverter' which, in turn, delegates to the 'integrationConversionService' (if present)."
        },
        {
          "name": "task-executor",
          "type": "string",
          "description": "Provides the reference to a bean that implements org.springframework.core.task.TaskExecutor which is used when dispatching Messages to this channel's subscribers. Also, when using a TaskExecutor, keep in mind that any transaction active for the sender will NOT propagate to the handler invocation since the TaskExecutor dispatches to the handler on a separate Thread. Usually configured using the 'task' namespace support provided by Spring (e.g., <task:executor/>)."
        },
        {
          "name": "error-handler",
          "type": "string",
          "description": "Provides reference to a bean that implements org.springframework.util.ErrorHandler and provides a strategy for handling errors. This is especially useful for handling errors that occur during asynchronous execution of tasks that have been submitted to a TaskScheduler, where it may not be possible to throw the error to the original caller."
        },
        {
          "name": "ignore-failures",
          "type": "boolean",
          "description": "Specify whether Exceptions thrown by any subscribed handler should be ignored (only logged).",
          "default": false
        },
        {
          "name": "apply-sequence",
          "type": "boolean",
          "description": "Specify whether the sequence size, sequence number, and correlation id headers should be set on Messages that are sent through this channel.",
          "default": false
        },
        {
          "name": "min-subscribers",
          "type": "string",
          "description": "Specifies the minimum subscribers required to be subscribed to this channel; if the minimum number of subscribers receive the message, the send is deemed to be successful (returns true). Defaults to 0."
        },
        {
          "name": "max-subscribers",
          "type": "string",
          "description": "Specifies the maximum subscribers allowed on this channel; defaults to Integer.MAX_VALUE, unless a 'channelInitializer' bean has previously been declared, with a different default."
        }
      ]
    }
  ],
  "jms": [
    {
      "name": "message-driven-channel-adapter",
      "description": "Defines a Message Producing Endpoint for the 'org.springframework.integration.jms.JmsMessageDrivenEndpoint' (one-way) to listen form message on the JMS destination.",
      "role": "endpoint",
      "flowType": "source",
      "attributes": [
        { "name": "id", "type": "string" },
        { "name": "destination-name", "type": "string" },
        {
          "name": "pub-sub-domain",
          "type": "boolean",
          "description": "The boolean property used to configure the listener container with knowledge of what JMS domain is being used. Unless 'subscription-shared' or 'subscription-durable' is true, by default the value of this property is 'false' , indicating that the point-to-point domain, Queues, will be used. When true, the pub/sub domain, Topics, will be used.",
          "default": false
        },
        {
          "name": "connection-factory",
          "type": "string"
        },
        {
          "name": "client-id",
          "type": "string",
          "description": "The JMS client id for a shared Connection created and used by this container. Note that client ids need to be unique among all active Connections of the underlying JMS provider. Furthermore, a client id can only be assigned if the original ConnectionFactory hasn't already assigned one."
        },
        {
          "name": "channel",
          "type": "string"
        },
        {
          "name": "error-channel",
          "type": "string",
          "description": "If a (synchronous) downstream exception is thrown and an error-channel is specified, the MessagingException will be sent to this channel. Otherwise, any such exception will be propagated to the listener container and any JMS transaction will be rolled back. Any synchronous downstream exceptions in the error flow will also cause any JMS transaction to be rolled back."
        },
        {
          "name": "send-timeout",
          "type": "string"
        },
        {
          "name": "concurrent-consumers",
          "type": "string",
          "description": "Specify the number of concurrent consumers to create. Default is 1. Specifying a higher value for this setting will increase the standard level of scheduled concurrent consumers at runtime: This is effectively the minimum number of concurrent consumers which will be scheduled at any given time. This is a static setting; for dynamic scaling, consider specifying the \"maxConcurrentConsumers\" setting instead. Raising the number of concurrent consumers is recommendable in order to scale the consumption of messages coming in from a queue. However, note that any ordering guarantees are lost once multiple consumers are registered"
        },
        {
          "name": "max-concurrent-consumers",
          "type": "string",
          "description": "Specify the maximum number of concurrent consumers to create. Default is 1. If this setting is higher than \"concurrentConsumers\", the listener container will dynamically schedule new consumers at runtime, provided that enough incoming messages are encountered. Once the load goes down again, the number of consumers will be reduced to the standard level (\"concurrentConsumers\") again. Raising the number of concurrent consumers is recommendable in order to scale the consumption of messages coming in from a queue. However, note that any ordering guarantees are lost once multiple consumers are registered."
        },
        {
          "name": "selector",
          "type": "string",
          "description": "A JMS Message Selector expression."
        }
      ]
    }
  ]
}
